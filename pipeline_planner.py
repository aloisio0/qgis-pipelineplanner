# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PipelinePlanner
                                 A QGIS plugin
 Allow the user to create a line and evaluate impacts
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-04
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Aloísio Ângelo
        email                : aloisioneto432@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QTableWidgetItem
from qgis.gui import QgsMapToolEmitPoint, QgsRubberBand
from qgis.core import QgsProject

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .pipeline_planner_dialog import PipelinePlannerDialog
import os.path


class PipelinePlanner:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        self.canvas = self.iface.mapCanvas()  # Variável para conectar-se a interface (tela do mapa)

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale

        self.addPipeLinePoint = QgsMapToolEmitPoint(self.canvas)
        # Criando uma instância da classe do mapa do QGIS, ferramenta de mapa que simplesmente emite um ponto ao clicar
        self.rbPiprline = QgsRubberBand(self.canvas)
        # Criando uma instância da classe para desenhar características transitórias, por padrão é a geometria é linha
        self.rbPiprline.setColor(Qt.red)  # Alterando a cor da linha
        self.rbPiprline.setWidth(4)  # Alterando a largura da linha

        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PipelinePlanner_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Pipeline Planner')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.dlg = PipelinePlannerDialog()  # Criando uma instância da caixa de diálogo dos resultados

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PipelinePlanner', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/pipeline_planner/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Pipeline Planner'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        self.addPipeLinePoint.canvasClicked.connect(self.evaluatePipeline)
        # Conectando o sinal da instância da Classe do mapa ao slot personalizado que será criado
        # Alterando a larcuga das colunas
        self.dlg.tblImpacts.setColumnWidth(1, 75)
        self.dlg.tblImpacts.setColumnWidth(2, 150)
        self.dlg.tblImpacts.setColumnWidth(3, 75)
        

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Pipeline Planner'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        self.canvas.setMapTool(self.addPipeLinePoint)
        # Definindo a ferramenta de mapa que está sendo usada atualmente na tela, no caso a ferramenta que foi criada

    def evaluatePipeline(self, point, button):
        """"""
        if button == Qt.LeftButton:  # Verificando se o usuário clicou com o botão esquerdo do mouse
            self.rbPiprline.addPoint(point)  # Adicionar o ponto a classe QgsRubberBand, ao elástico
            self.rbPiprline.show()  # exibir o ponto
        elif button == Qt.RightButton:  # Verificando se o usuário clicou com o botão direito do mouse
            pipeline = self.rbPiprline.asGeometry()  # Retorna o elástico como uma Geometria

            self.dlg.tblImpacts.setRowCount(0)  # Limpando a tabela
            lyrRaptor = QgsProject.instance().mapLayersByName("Raptor Buffer")[0]  # Acessando o Layer "Raptor Nests"
            raptors = lyrRaptor.getFeatures(pipeline.boundingBox())
            # Acessando os Features do Layer "Raptor Nests" que estão proximos ao pipeline
            for raptor in raptors:
                valConstraint = raptor.attribute("recentspec")  # Coletando a Espécie
                valID = raptor.attribute("Nest_ID")  # Coletando o ID
                valStatus = raptor.attribute("recentstat")  # Coletando o Type
                valDistance = pipeline.distance(raptor.geometry().centroid())
                # Coletando a distância do Nest a pipeline
                if raptor.geometry().intersects(pipeline):
                    row = self.dlg.tblImpacts.rowCount()  # Determinando o número de linhas na tabela
                    self.dlg.tblImpacts.insertRow(row)  # Adicionando uma linha no final da Tabela
                    self.dlg.tblImpacts.setItem(row, 0, QTableWidgetItem(str(valConstraint)))
                    # Adicionando o item Espécie na linha
                    self.dlg.tblImpacts.setItem(row, 1, QTableWidgetItem(str(valID)))  # Adicionando o item ID na linha
                    self.dlg.tblImpacts.setItem(row, 2, QTableWidgetItem(str(valStatus)))
                    # Adicionando o item Status na linha
                    self.dlg.tblImpacts.setItem(row, 3, QTableWidgetItem("{:4.5f}".format(valDistance)))
                    # Adicionando o item Distance na linha

            lyrEagle = QgsProject.instance().mapLayersByName("BAEA Buffer")[0]  # Acessando o Layer "BAEA Buffer"
            eagles = lyrEagle.getFeatures(
                pipeline.boundingBox())  # Acessando os Features do Layer "BAEA Buffer" que estão proximos ao pipeline
            for eagle in eagles:
                valConstraint = "BAEA Nest"
                valID = eagle.attribute("nest_id")  # Coletando o ID
                valStatus = eagle.attribute("status")  # Coletando o Type
                valDistance = pipeline.distance(eagle.geometry().centroid())  # Coletando a distância do Nest a pipeline
                if eagle.geometry().intersects(pipeline):
                    row = self.dlg.tblImpacts.rowCount()  # Determinando o número de linhas na tabela
                    self.dlg.tblImpacts.insertRow(row)  # Adicionando uma linha no final da Tabela
                    self.dlg.tblImpacts.setItem(row, 0, QTableWidgetItem(
                        str(valConstraint)))  # Adicionando o item Espécie na linha
                    self.dlg.tblImpacts.setItem(row, 1, QTableWidgetItem(str(valID)))  # Adicionando o item ID na linha
                    self.dlg.tblImpacts.setItem(row, 2,
                                                QTableWidgetItem(str(valStatus)))  # Adicionando o item Status na linha
                    self.dlg.tblImpacts.setItem(row, 3, QTableWidgetItem(
                        "{:4.5f}".format(valDistance)))  # Adicionando o item Distance na linha

            lyrBUOWL = QgsProject.instance().mapLayersByName("BUOWL Buffer")[0]  # Acessando o Layer "BUOWL Buffer"
            buowls = lyrBUOWL.getFeatures(
                pipeline.boundingBox())  # Acessando os Features do Layer "BUOWL Buffer" que estão proximos ao pipeline
            for buowl in buowls:
                valConstraint = "BUOWL Habitat"
                valID = buowl.attribute("habitat_id")  # Coletando o ID
                valStatus = buowl.attribute("recentstat")  # Coletando o Type
                valDistance = pipeline.distance(
                    buowl.geometry().buffer(-0.001, 5))  # Coletando a distância do Nest a pipeline
                if buowl.geometry().intersects(pipeline):
                    row = self.dlg.tblImpacts.rowCount()  # Determinando o número de linhas na tabela
                    self.dlg.tblImpacts.insertRow(row)  # Adicionando uma linha no final da Tabela
                    self.dlg.tblImpacts.setItem(row, 0, QTableWidgetItem(
                        str(valConstraint)))  # Adicionando o item Espécie na linha
                    self.dlg.tblImpacts.setItem(row, 1, QTableWidgetItem(str(valID)))  # Adicionando o item ID na linha
                    self.dlg.tblImpacts.setItem(row, 2,
                                                QTableWidgetItem(str(valStatus)))  # Adicionando o item Status na linha
                    self.dlg.tblImpacts.setItem(row, 3, QTableWidgetItem(
                        "{:4.5f}".format(valDistance)))  # Adicionando o item Distance na linha

            self.dlg.show()

            self.rbPiprline.reset()  # encerrar o elástico e iniciar um novo
        
